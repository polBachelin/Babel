@startuml Babel
!define DARKBLUE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

namespace Client {
     class Test<T> {

        -T _x;
        -T _y;
    }

}

namespace Load {
    class DLLoader<T> {
        +static std::shared_ptr<T> getEntryPoint(std::string filePath);
    }

    class ConfigFileParser {}
}

namespace Sound {
    class EncodedSound {
        -unsigned char *buffer;
        -int size;
    }

    class DecodedSound {
        -int _frameIndex;
        -int _maxFrameIndex;
        -int size;
        -float *_sample //Sample size is = NUM_SECONS * SAMPLE_RATE * NUM_CHANNELS * sizeof(float)
    }

    class ISoundManager {
        +int recordAudio() = 0;
        +int playAudio() = 0;
        +bool isStreamActive() = 0;
        +bool isMicMuted() = 0;
        +bool isOutputMuted() = 0;
        +DecodedSound getSound() const = 0;
    }

    class IEncodeManager {
        +EncodedSound encode(DecodedSound &sound) = 0;
        +DecodedSound decode(EncodedSound &sound) = 0;
    }
}

namespace SoundLib {
    class PortAudioManager {
        +void recordCallback();
        +void playCallback();
        -std::shared_ptr<DecodedSound> _sound;
        -PaStream *_stream;
        -PaStreamParameters _outputParameters;
        -PaStreamParameters _inputParameters;
    }

    class OpusEncoderManager {
        -OpusEncoder *_encoder;
        -OpusDecoder *_decoder;
    }
}

'Sound.ISoundManager->Sound.ASoundManager
Sound.ISoundManager->SoundLib.PortAudioManager
Sound.IEncodeManager->SoundLib.OpusEncoderManager
@enduml