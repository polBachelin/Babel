@startuml Indie_Studio
!define DARKBLUE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

namespace server {
    entity CallBackData
    {
        +int ac
        +std::deque<std::string> av
        +std::deque<std::string> c_name
    }

    entity packet
    {
        +int magic
        +int code
        +int data_size
        +std::array<char, 2048> data;
    }

    enum requestCode
    {
        +LOGIN = 0
        +REGISTER = 1
        +ADD_CONTACT = 2
        +ACCEPT_CONTACT = 112
        +CALL = 3
        +ASK_CONTACT_LIST = 4
        +CALL_WAS_REFUSE = 203
    }

    enum responseCode
    {
        +LOGIN_SUCCESS = 100
        +LOGIN_FAILED = 200
        +REGISTER_SUCCESS = 101
        +REGISTER_FAILED = 201
        +INVTATION_RECEIVE = 12
        +CONTACT_EXIST = 102
        +CONTACT_ADD_FAILED = 202
        +INCOMING_CALL = 303
        +USER_NOT_FOUND = 603
        +CALL_REFUSED = 203
        +DONT_SEND = 666
        +CONTACT_LIST = 4
    }

    class CommandsManager
    {
        .. public typedef ..

        +typedef std::deque<std::pair<std::shared_ptr<asio::ip::tcp::socket>, packet_t *>> pck_list;

        +typedef std::function<pck_list *(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &, std::shared_ptr<ClientManager>)> cmd_ptr;

        .. Ctor/Dtor ..

        +CommandsManager() = default;

        +~CommandsManager() = default;

        .. public member fonctions ..

        +static pck_list *redirect(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &, std::shared_ptr<ClientManager>);

        +static pck_list *createPacket(pck_list &l, std::shared_ptr<asio::ip::tcp::socket> s, int code, const std::string &data);

        +static pck_list *login(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &, std::shared_ptr<ClientManager>);

        +static pck_list *registerUser(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &clients, std::shared_ptr<ClientManager>currentClient);

        +static pck_list *addContact(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &clients, std::shared_ptr<ClientManager>currentClient);

        +static pck_list *callX(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &clients, std::shared_ptr<ClientManager>currentClient);

        +static pck_list *callRefused(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &clients, std::shared_ptr<ClientManager>currentClient);

        +static pck_list *listContact(const packet_t &pck, std::deque<std::shared_ptr<ClientManager>> &clients, std::shared_ptr<ClientManager>currentClient);

        .. private member variables ..

        -static const std::map<std::size_t, cmd_ptr> _cmdMap;
    }

    interface IDatabase
    {
        .. public member fonction ..

        +virtual int open(const std::string &filename) = 0

        +virtual int close() = 0

        +virtual int insert(const std::string &t_name, const std::string &c_name, const std::string &value) = 0

        +virtual int createTable(const std::string &name, const std::string &columns) = 0

        +virtual CallBackData_t getInfo(const std::string &t_name, const std::string &c_name) = 0

        +virtual int update(const std::string &t_name, const std::string &c_name, const std::string &id, const std::string &value) = 0

        +virtual int deleteId(const std::string &t_name, const std::string &id) = 0

        +virtual int custom(const std::string &req) = 0
    }

    class Database
    {
        .. public Ctor/Dtor ..

        +Database()

        +Database(const std::string &filename)

        +~Database()

        .. public member fonction ..

        +int open(const std::string &filename) override

        +int close() override

        +int insert(const std::string &t_name, const std::string &c_name, const std::string &value) override

        +int createTable(const std::string &name, const std::string &columns) override

        +CallBackData_t getInfo(const std::string &t_name, const std::string &c_name) override

        +int update(const std::string &t_name, const std::string &c_name, const std::string &id, const std::string &value) override

        +int deleteId(const std::string &t_name, const std::string &id) 

        +int custom(const std::string &req) override

        .. private member variables ..
        
        -sqlite3 *_db

        -char *_err_msg

        -CallBackData_t _data
    }

    interface ITcpServer
    {
        .. public member fonction ..

        +virtual void acceptConnection() = 0;

        +virtual void initServer(int port) = 0;

        +virtual void run() = 0;
    }

    interface ITcpConnection
    {
        .. public member fonction ..

        +virtual void start() = 0

        +virtual void interpret() = 0
    }

    class AsioTcpConnection
    {
        .. public Ctor/Dtor ..

        +AsioTcpConnection(asio::io_context& io_context, std::deque<std::shared_ptr<ClientManager>> &);

        +AsioTcpConnection(const AsioTcpConnection &);

        +~AsioTcpConnection();        

        .. public member fonction ..

        +void start() override;

        +void handleWrite(const asio::error_code& /*error*/, size_t /*bytes_transferred*/);

        +void handleReadHeader(const asio::error_code &, std::size_t);

        +void handleReadData(const asio::error_code &, std::size_t);

        +std::shared_ptr<asio::ip::tcp::socket> getSocket() const;

        +std::shared_ptr<ClientManager> getClientManager() const;

        +void interpret();

        +const bool isAlive() const;

        .. private member variables

        -std::array<char, 2048> _buffer;

        -std::shared_ptr<asio::ip::tcp::socket> _socket;

        -std::shared_ptr<ClientManager> _clientManager;

        -std::deque<std::shared_ptr<ClientManager>> &_clients;

        -bool _isAlive;
    }

    class AsioTcpServer
    {
        .. public Ctor/Dtor ..
        
        +AsioTcpServer()

        +~AsioTcpServer()

        .. public member fonction ..

        +void acceptConnection() override;

        +void initServer(int port) override;

        +void run() override;

        +void listen();

        +void printLocalAdress();

        +void handleAccept(std::shared_ptr<AsioTcpConnection> new_connection, const asio::error_code& error);

        +std::deque<std::shared_ptr<ClientManager>> &getClientList();

        .. private member variables ..

        -std::shared_ptr<asio::io_context> _io;

        -int _port = 0;

        -std::unique_ptr<asio::ip::tcp::acceptor> _acceptor;

        -std::deque<std::shared_ptr<ClientManager>> _clients;

        -std::unique_ptr<std::thread> _runThread;

        -std::mutex _mtx;
    }

    class UserManager
    {

        .. public Ctor/Dtor ..

        UserManager();

        ~UserManager();

        .. public public member fonction ..

        int login(const std::string &, const std::string &);

        int newUser(const std::string &, const std::string &);

        ContactManager getContactManager() const;

        std::string getName() const;

        .. private member variables ..

        Database _db;

        ContactManager _cm;

        std::string _name;

        bool _isLog = false;
    }

    class ContactManager
    {
        .. public Ctor/Dtor ..

        ContactManager();

        ContactManager(const std::string &);

        ~ContactManager();

        .. public member fonction ..

        void addContact(const std::string &new_c, const std::string &your_name);

        void addContact(const std::string &new_c);

        void setName(const std::string &);

        std::string getContactList();

        std::string getContactList(const std::string &your_name);

        .. private member variables ..

        Database _db;

        std::string _myName;

        std::string _tableName;
    }


note top of AsioTcpConnection : : public std::enable_shared_from_this<tcp_connection>
ITcpConnection<--AsioTcpConnection
ITcpServer<--AsioTcpServer
IDatabase<--Database
}



@enduml