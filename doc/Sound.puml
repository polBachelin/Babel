@startuml





/' Objects '/

class Error {
	+Error(std::string const& message, std::string const& component)
	+what() : char* {query}
	#_component : std::string
	-_message : std::string
	+getComponent() : std::string& {query}
}


class Error {
	+Error(std::string const& message, std::string const& component)
	+what() : char* {query}
	#_component : std::string
	-_message : std::string
	+getComponent() : std::string& {query}
}


abstract class IEncodeManager {
	+~IEncodeManager()
	+{abstract} decode(const unsigned char* input, float* output, int frameSize, std::size_t intputSize) : int
	+{abstract} encode(unsigned char* output, float* input, int frameSize, std::size_t outputSize) : int
	+{abstract} initDecoder() : void
	+{abstract} initEncoder() : void
	+{abstract} setBitRate(const int& bitRate) : void
	+{abstract} setComplexity(const int& complexity) : void
	+{abstract} setSamplingRate(const int& samplingRate) : void
}


abstract class ISoundManager {
	+~ISoundManager()
	+{abstract} isInputStreamActive() : bool
	+{abstract} isMicMuted() : bool
	+{abstract} isOutputMuted() : bool
	+{abstract} isOutputStreamActive() : bool
	+{abstract} getBytesInInput() : int
	+{abstract} getSampleRate() : int
	+{abstract} retrieveInputBytes(float* sample, size_t len) : int
	+{abstract} getInputChannels() : size_t {query}
	+{abstract} getOutputChannels() : size_t {query}
	+{abstract} getInputDeviceNames() : std::vector<std::string> {query}
	+{abstract} getOutputDeviceNames() : std::vector<std::string> {query}
	+{abstract} abortInputStream() : void
	+{abstract} abortOutputStream() : void
	+{abstract} closeInputStream() : void
	+{abstract} closeOutputStream() : void
	+{abstract} feedBytesToOutput(float* sample, unsigned long len) : void
	+{abstract} loadDefaultDevices() : void
	+{abstract} setDefaultInputDevice() : void
	+{abstract} setDefaultOutputDevice() : void
	+{abstract} setMicMute(bool mute) : void
	+{abstract} setOutputMute(bool mute) : void
	+{abstract} startInputStream() : void
	+{abstract} startOutputStream() : void
}


class OpusException {
	+OpusException(const std::string& message, const std::string& component)
}


class OpusManager {
	+OpusManager()
	+~OpusManager()
	#_decoder : OpusDecoder*
	#_encoder : OpusEncoder*
	#_bitRate : int
	#_complexity : int
	#_samplingRate : int
	+decode(const unsigned char* input, float* output, int frameSize, std::size_t intputSize) : int
	+encode(unsigned char* output, float* input, int frameSize, std::size_t outputSize) : int
	#_decoderErr : opus_int32
	#_err : opus_int32
	+initDecoder() : void
	+initEncoder() : void
	+setBitRate(const int& bitRate) : void
	+setComplexity(const int& complexity) : void
	+setSamplingRate(const int& samplingRate) : void
}


class PortAudioException {
	+PortAudioException(const std::string& message, const std::string& component)
}


class PortAudioManager {
	+PortAudioManager()
	+~PortAudioManager()
	#_inputStream : PaStream*
	#_outputStream : PaStream*
	#_inputParameters : PaStreamParameters
	#_outputParameters : PaStreamParameters
	#_micMute : bool
	#_outputMute : bool
	+isInputStreamActive() : bool
	+isMicMuted() : bool
	+isOutputMuted() : bool
	+isOutputStreamActive() : bool
	#_inputSample : float*
	#_outputSample : float*
	#_inputIndex : int
	#_outputIndex : int
	+getBytesInInput() : int
	+getSampleRate() : int
	+openInputStream() : int
	+openOutputStream() : int
	+{static} playCallback(const void* inputBuffer, void* outputBuffer, unsigned long framesPerBuffer, const PaStreamCallbackTimeInfo* timeInfo, PaStreamCallbackFlags statusFlags, void* userData) : int
	+{static} recordCallback(const void* inputBuffer, void* outputBuffer, unsigned long framesPerBuffer, const PaStreamCallbackTimeInfo* timeInfo, PaStreamCallbackFlags statusFlags, void* userData) : int
	+retrieveInputBytes(float* sample, size_t len) : int
	#_data : paData
	#_inputChannels : size_t
	#_outputChannels : size_t
	+getInputChannels() : size_t {query}
	+getOutputChannels() : size_t {query}
	-{static} _init : static bool
	#_inputBuffer : std::unique_ptr<CircularBuffer>
	#_outputBuffer : std::unique_ptr<CircularBuffer>
	+getInputDeviceNames() : std::vector<std::string> {query}
	+getOutputDeviceNames() : std::vector<std::string> {query}
	+abortInputStream() : void
	+abortOutputStream() : void
	+allocateBuffers() : void
	+closeInputStream() : void
	+closeOutputStream() : void
	+feedBytesToOutput(float* sample, unsigned long len) : void
	+loadApi() : void
	+loadDefaultDevices() : void
	+loadDevices(const int& inputChannels, const int& outputChannels) : void
	+setDefaultInputDevice() : void
	+setDefaultOutputDevice() : void
	+setInputChannels(const size_t& nbChannels) : void
	+setMicMute(bool mute) : void
	+setOutputMute(bool mute) : void
	+startInputStream() : void
	+startOutputStream() : void
	+{static} writeToBuffer(float* rptr, unsigned long framesPerBuffer) : void
}


class paData {
	+recordedSamples : float*
	+frameIndex : int
	+maxFrameIndex : int
}





/' Inheritance relationships '/

.Error <|-- .OpusException


.Error <|-- .PortAudioException


.IEncodeManager <|-- .OpusManager


.ISoundManager <|-- .PortAudioManager





/' Aggregation relationships '/

.PortAudioManager *-- .paData






/' Nested objects '/



@enduml
